class CellArg{static Instruction=class{static Type=Object.freeze({Add:"+",Subtract:"-",Jump:";",Print:"#",Input:"$"});type;parameters;constructor(t,...r){this.type=t,this.parameters=r}};static instructionRegex=/[\+\-;#$]( ?[0-9])+/g;instructions=[];memory=[0,1];instructionPointer=-1;output="";printFunction=t=>{};inputFunction=()=>{};constructor(t){this.instructions="string"==typeof t?CellArg.parse(t):t}run(){for(;this.instructionPointer<this.instructions.length-1;)this.runInstruction()}runInstruction(){this.instructionPointer++;const t=CellArg.Instruction.Type;let r=this.instructions[this.instructionPointer];const i=r.parameters.map((t=>this.memoryGet(t)));switch(r.type){case t.Add:this.memoryWrite(i[0],this.memoryGet(i[0])+this.memoryGet(i[1]));break;case t.Subtract:this.memoryWrite(i[0],this.memoryGet(i[0])-this.memoryGet(i[1]));break;case t.Jump:0!=this.memoryGet(i[1])&&(this.instructionPointer=this.memoryGet(i[0]));break;case t.Print:const r=String.fromCharCode(this.memoryGet(i[0]));this.output+=r,this.printFunction(r);break;case t.Input:let e=this.inputFunction();"string"==typeof e&&(e=e.charCodeAt()),this.memoryWrite(i[0],e)}}memoryGet(t){let r=this.memory[t];return isNaN(r)?0:r}memoryWrite(t,r){(r%=256)<0&&(r+=256),this.memory[t]=r}static parse(t){return t.match(CellArg.instructionRegex).map((t=>{let r=t.split(" ");return new CellArg.Instruction(r.shift(),...r.map((t=>+t)))}))}}
